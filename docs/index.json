[{"body":"Networking vendors like Cisco, Arista , Juniper have developped their own operating system and all networking engineers had to learn them in order to be relevant when designing, implementing or supporting their own network.\nEach of these operating systems has its unique features and capabilities, and they are used in different network environments and for different purposes. Some are more suitable for small-scale networks, while others are designed for large-scale enterprise networks. It should be noted that most of these Network OS are based on Linux or BSD.\nCisco even has more than one OS for their platforms:\nCisco CatOS - Deprecated. Cisco IOS - used for Cisco routers and switches Cisco IOS XE - used for Cisco Catalyst 9000 series switches Cisco IOS XR - used for Cisco ASR 9000 series routers Cisco NX-OS - used for Cisco Nexus series switches\nIt is important to fathom that there are some open source projects focusing on network OS:\nQuagga - open-source routing suite that supports multiple routing protocols. Maintained between 2001 and 2018 and created as an alternative to proprietary routing solutions. It was based on the Zebra routing suite.\nFRR - Fork and successor to Quagga, this routing daemon is widely used in the industry by networking vendors like VMware (for their NSX Edge network stack) and Nvidia Cumulus. It is designed to be more modular and flexible than Quagga, making it easier to add new features and support for new routing protocols.\nBird - In their own terms: The BIRD project aims to develop a dynamic IP routing daemon with full support of all modern routing protocols, easy to use configuration interface andpowerful route filtering language, primarily targeted on (but not limited to) Linux and other UNIX-like systems and distributed under the GNU General Public License. I have never used BIRD but will definitely spend more time doing so as it supports an extensive range of protocols and is actively developped. It is probably the oldest open source networking project still in activity. Fun fact : BIRD is the most used route server amongst European Internet exchanges so I guess it has been build with scalability in mind :).\nGoBGP - Routing daemon focusing solely on the BGP routing protocol and hence its name, written in Go./\nIf you want to compare these network stacks, Justin Pietsch did an amazing job here\nI have been using FRR extensively in my career and will spend some time showing the particularities of this network stack\nWhat is FRR ? Designed to provide a full-featured routing stack for Linux-based network operating systems. It is developed by a group of networking experts and is distributed under the GNU General Public License version 2, which makes it freely available to anyone.\nIt supports everything you need (well...) in terms of routing protocols like OSPF, BGP, IS-IS and even multicast. As I mentionned previously, it is widely used by networking vendors making it suitable for large-scale datacenters.\nVTYSH is an integrated shell for Quagga/FRR that allows you to configure the network interfaces and routing protocol the same way you would do in a traditionnal switches. Network engineers used to the Cisco IOS language will be able to navigate easily through VTYSH making it easy to adopt by reducing the learning curve. VTYSH comes automatically with FRR.\nBack to the FRR architecture, it uses separate daemons that are independent and responsible for a specific functionality or routing protocol. It allows you to implement only the daemon you need in your architecture without having other dependencies\nBasic topology used We will install FRR on 2 Ubuntu server 22.04 virtual machines.\nEach virtual machine will be deployed with at least 2 network interfaces cards :\nENS160 will be used as a management interface ENS192 will be configured using FRR. This interface on vCenter should use a dedicated VLAN and shared between the two ubuntu servers FRR installation in Ubuntu server 22.04 We will be using this documentation related to FRR for debian packages.\nAfter Ubuntu 22.04 is installed, we need to download the package informations from all configured sources.\n1sudo apt-get update 2sudo apt-get upgrade =\u0026gt; never hurts anyone to upgrade to the new packages :) Now we need to add the GPG key for the package source into the apt keyring of Ubuntu.\n1curl -s https://deb.frrouting.org/frr/keys.asc | sudo apt-key add - Then we need to add the FRR package repository to the list of package sources for apt.\n1 2FRRVER=\u0026#34;frr-stable\u0026#34; 3echo deb https://deb.frrouting.org/frr $(lsb_release -s -c) $FRRVER | sudo tee -a /etc/apt/sources.list.d/frr.list Using the FRRVER environment , you can choose which version of FRR you want to install. Then install the FRR package and its dependencies:\n1sudo apt update \u0026amp;\u0026amp; sudo apt install frr frr-pythontools After this, we need to check if frr is running:\nWe can now start configuring our interfaces and test the connectivity.\nLet's have a look at the interfaces :\n1$ ip a 21: lo: \u0026lt;LOOPBACK,UP,LOWER_UP\u0026gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 3 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 4 inet 127.0.0.1/8 scope host lo 5 valid_lft forever preferred_lft forever 6 inet6 ::1/128 scope host 7 valid_lft forever preferred_lft forever 82: ens160: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc mq state UP group default qlen 1000 9 link/ether ****** brd ff:ff:ff:ff:ff:ff 10 altname enp3s0 11 inet ** brd ** scope global ens160 12 valid_lft forever preferred_lft forever 13 inet6 ** scope link 14 valid_lft forever preferred_lft forever 153: ens192: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc mq state UP group default qlen 1000 16 link/ether ****** brd ff:ff:ff:ff:ff:ff 17 altname enp11s0 18 inet6 ****** scope link 19 valid_lft forever preferred_lft forever 204: ens224: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc mq state UP group default qlen 1000 21 link/ether 00:50:56:bf:07:c0 brd ff:ff:ff:ff:ff:ff 22 altname enp19s0 23 inet6 fe80::250:56ff:febf:7c0/64 scope link 24 valid_lft forever preferred_lft forever We can see that ens192 has no interfaces configured, let's use the FRR VTYSH shell to configure it on the frr server. (you will need to perform this on both ubuntu servers using different IP addresses of course)\n1nmichel@srv-frr-02:~$ sudo vtysh 2Hello, this is FRRouting (version 8.4.2). 3Copyright 1996-2005 Kunihiro Ishiguro, et al. 4 5srv-frr-02# config t 6srv-frr-02(config)# int ens192 7srv-frr-02(config-if)# ip add 10.1.1.2/24 8srv-frr-02(config-if)# no shut 9srv-frr-02(config-if)# end 10srv-frr-02# Let's do some verification:\n1nmichel@srv-frr-02:~$ ip addr show ens192 23: ens192: \u0026lt;BROADCAST,MULTICAST,UP,LOWER_UP\u0026gt; mtu 1500 qdisc mq state UP group default qlen 1000 3 link/ether 00:50:56:bf:3c:df brd ff:ff:ff:ff:ff:ff 4 altname enp11s0 5 inet 10.1.1.2/24 brd 10.1.1.255 scope global ens192 6 valid_lft forever preferred_lft forever 7 inet6 fe80::250:56ff:febf:3cdf/64 scope link 8 valid_lft forever preferred_lft forever 9nmichel@srv-frr-02:~$ Since we added another interfaces, the Linux routing table has been udpated:\n1nmichel@srv-frr-02:~$ ip route 2default via 192.168.199.1 dev ens160 proto static 310.1.1.0/24 dev ens192 proto kernel scope link src 10.1.1.2 4192.168.199.23/24 dev ens160 proto kernel scope link src 192.168.199.23 Connectivity tests can now occur:\n1nmichel@srv-frr-02:~$ ping 10.1.1.1 -c 1 2PING 10.1.1.1 (10.1.1.1) 56(84) bytes of data. 364 bytes from 10.1.1.1: icmp_seq=1 ttl=64 time=0.226 ms 4 5--- 10.1.1.1 ping statistics --- 61 packets transmitted, 1 received, 0% packet loss, time 0ms 7rtt min/avg/max/mdev = 0.226/0.226/0.226/0.000 ms In the next blogposts, I will demonstrate how to create and automate a full BGP configuration using FRR.\n","link":"https://blog.vpackets.net/post/frr/101-install/","section":"post","tags":["FRR","Linux Networking"],"title":"FRR 101 - Install"},{"body":"In this blogpost we are going to create a Virtual Private Cloud in Amazon Web Services that will host all the shared services generally deployed by an IT team. Since networking is fundamental to allow communication between servers and computers, every cloud service providers use a dedicated network construct. AWS and Google Cloud call it a VPC, while Azure for example calls it a VNET (virtual network).\nNetwork constructs are different between cloud providers. For example, a VPC is global in Google Cloud while it is a regional construct in AWS. This blogpost is not targeted to highlight the networking differences between AWS and GCP (more on that in a dedicated blogpost).\nAs AWS mentions, \u0026quot;A region is a physical location around the world where we cluster data centers. We call each group of logical data centers an Availability Zone. Each AWS Region consists of multiple, isolated, and physically separate AZs within a geographic area. Unlike other cloud providers, who often define a region as a single data center, the multiple AZ design of every AWS Region offers advantages for customers. Each AZ has independent power, cooling, and physical security and is connected via redundant, ultra-low-latency networks. AWS customers focused on high availability can design their applications to run in multiple AZs to achieve even greater fault-tolerance. AWS infrastructure Regions meet the highest levels of security, compliance, and data protection.\nWhat we are trying to achieve is the following:\nThat's the diagram of a very general VPC that can created using the AWS Console. We will also cover how to create a VPC using several automation tools like the AWS CLI and Hashicorp Terraform and here is an example\nThe AWS console offers the choice to create juste a simple VPC without any other additionnal network construct or the entiore VPC with all the objects needed to allow communication between your entities (Route table, Security Group, NAT and Internet gateways). In our example we will be using the options that allows us to create all networking construct at once.\nCIDR:\nThis VPC has a CIDR or 10.0.10.0/24 and AWS will automatically create 2 publics subnets and 2 private subnets. These public and private subnets will be shared between the availability chosen during the creation process. No IPv6 is required for now.\nNumber of Availability zones: 2 is sufficient\nNumber of public and private subnets: 2 each (even though only 1 public is sufficient, our VPC might need additional private and public subnets later on.)\nNAT Gateway: None.\nThe following picture shows how to create your VPC:\nFor now we do not have to take care of any Elastic IP Address as we will ask AWS to assign a public IP to our controller when we deploy it.\nFinally the AWS Console will confirm that all the objects within the VPC have been created:\nThe next picture will demonstrate the automatically created subnets and route tables for the specifically mentionned availability zones.\nIf we have a look at the route tables associated with that VPC, we can see that each private subnet has its own routing table. The public subnets share the same public route table:\nWhen you dig into the \u0026quot;AWS-UE1-VPC-MGMT-rtb-public\u0026quot; routing table, we can see that it has two routes for now :\n10.0.10.0/24, that is local 0.0.0.0/0, the default route that points to an internet gateway. Now if we deploy an EC2 instance into any public subnet that belongs to the Region/AZ created previously, we should have connectivity to reach the internet. If we want to authorize inbound traffic to that EC2 instance, we need to allow that traffic using the stateful AWS Security Groups.\nOur VPC should be ready to host our Aviatrix Controller to start out multicloud journey.\nBonus If you want to verify using the CLI (some of us are still network engineers right ?) you can configure your computer following this doc.\n(I will reduce the amount of information in the outputs below to focus on what's important. For example, this output should also list the default VPCs but I will not list it)\n1 2$ aws ec2 describe-vpcs | jq 1{ 2 \u0026#34;Vpcs\u0026#34;: [ 3 { 4 \u0026#34;CidrBlock\u0026#34;: \u0026#34;10.0.10.0/24\u0026#34;, 5 \u0026#34;DhcpOptionsId\u0026#34;: \u0026#34;dopt-0a943645c8bc81085\u0026#34;, 6 \u0026#34;State\u0026#34;: \u0026#34;available\u0026#34;, 7 \u0026#34;VpcId\u0026#34;: \u0026#34;vpc-08aee6f377637f9ae\u0026#34;, 8 \u0026#34;OwnerId\u0026#34;: \u0026#34;\u0026#34;, 9 \u0026#34;InstanceTenancy\u0026#34;: \u0026#34;default\u0026#34;, 10 \u0026#34;CidrBlockAssociationSet\u0026#34;: [ 11 { 12 \u0026#34;AssociationId\u0026#34;: \u0026#34;vpc-cidr-assoc-04f586cab46d8b000\u0026#34;, 13 \u0026#34;CidrBlock\u0026#34;: \u0026#34;10.0.10.0/24\u0026#34;, 14 \u0026#34;CidrBlockState\u0026#34;: { 15 \u0026#34;State\u0026#34;: \u0026#34;associated\u0026#34; 16 } 17 } 18 ], 19 \u0026#34;IsDefault\u0026#34;: false, 20 \u0026#34;Tags\u0026#34;: [ 21 { 22 \u0026#34;Key\u0026#34;: \u0026#34;Name\u0026#34;, 23 \u0026#34;Value\u0026#34;: \u0026#34;AWS-UE1-VPC-MGMT\u0026#34; 24 } 25 ] 26 }, 27 ] 28} We can also check for the subnets created.\n1$ aws ec2 describe-subnets --filters \u0026#34;Name=vpc-id,Values=vpc-08aee6f377637f9ae\u0026#34; | jq 1 2{ 3 \u0026#34;Subnets\u0026#34;: [ 4 { 5 \u0026#34;AvailabilityZone\u0026#34;: \u0026#34;us-east-1b\u0026#34;, 6 \u0026#34;AvailabilityZoneId\u0026#34;: \u0026#34;use1-az1\u0026#34;, 7 \u0026#34;AvailableIpAddressCount\u0026#34;: 11, 8 \u0026#34;CidrBlock\u0026#34;: \u0026#34;10.0.10.16/28\u0026#34;, 9 \u0026#34;DefaultForAz\u0026#34;: false, 10 \u0026#34;MapPublicIpOnLaunch\u0026#34;: false, 11 \u0026#34;MapCustomerOwnedIpOnLaunch\u0026#34;: false, 12 \u0026#34;State\u0026#34;: \u0026#34;available\u0026#34;, 13 \u0026#34;SubnetId\u0026#34;: \u0026#34;subnet-07c81d6d42836a8f9\u0026#34;, 14 \u0026#34;VpcId\u0026#34;: \u0026#34;vpc-08aee6f377637f9ae\u0026#34;, 15 \u0026#34;OwnerId\u0026#34;: \u0026#34; \u0026#34;, 16 \u0026#34;AssignIpv6AddressOnCreation\u0026#34;: false, 17 \u0026#34;Ipv6CidrBlockAssociationSet\u0026#34;: [], 18 \u0026#34;Tags\u0026#34;: [ 19 { 20 \u0026#34;Key\u0026#34;: \u0026#34;Name\u0026#34;, 21 \u0026#34;Value\u0026#34;: \u0026#34;AWS-UE1-VPC-MGMT -subnet-public2-us-east-1b\u0026#34; 22 } 23 ], 24 \u0026#34;SubnetArn\u0026#34;: \u0026#34;arn:aws:ec2:us-east-1: :subnet/subnet-07c81d6d42836a8f9\u0026#34;, 25 \u0026#34;EnableDns64\u0026#34;: false, 26 \u0026#34;Ipv6Native\u0026#34;: false, 27 \u0026#34;PrivateDnsNameOptionsOnLaunch\u0026#34;: { 28 \u0026#34;HostnameType\u0026#34;: \u0026#34;ip-name\u0026#34;, 29 \u0026#34;EnableResourceNameDnsARecord\u0026#34;: false, 30 \u0026#34;EnableResourceNameDnsAAAARecord\u0026#34;: false 31 } 32 }, 33 { 34 \u0026#34;AvailabilityZone\u0026#34;: \u0026#34;us-east-1b\u0026#34;, 35 \u0026#34;AvailabilityZoneId\u0026#34;: \u0026#34;use1-az1\u0026#34;, 36 \u0026#34;AvailableIpAddressCount\u0026#34;: 11, 37 \u0026#34;CidrBlock\u0026#34;: \u0026#34;10.0.10.144/28\u0026#34;, 38 \u0026#34;DefaultForAz\u0026#34;: false, 39 \u0026#34;MapPublicIpOnLaunch\u0026#34;: false, 40 \u0026#34;MapCustomerOwnedIpOnLaunch\u0026#34;: false, 41 \u0026#34;State\u0026#34;: \u0026#34;available\u0026#34;, 42 \u0026#34;SubnetId\u0026#34;: \u0026#34;subnet-0f75d35ae1da469cc\u0026#34;, 43 \u0026#34;VpcId\u0026#34;: \u0026#34;vpc-08aee6f377637f9ae\u0026#34;, 44 \u0026#34;OwnerId\u0026#34;: \u0026#34; \u0026#34;, 45 \u0026#34;AssignIpv6AddressOnCreation\u0026#34;: false, 46 \u0026#34;Ipv6CidrBlockAssociationSet\u0026#34;: [], 47 \u0026#34;Tags\u0026#34;: [ 48 { 49 \u0026#34;Key\u0026#34;: \u0026#34;Name\u0026#34;, 50 \u0026#34;Value\u0026#34;: \u0026#34;AWS-UE1-VPC-MGMT -subnet-private2-us-east-1b\u0026#34; 51 } 52 ], 53 \u0026#34;SubnetArn\u0026#34;: \u0026#34;arn:aws:ec2:us-east-1: :subnet/subnet-0f75d35ae1da469cc\u0026#34;, 54 \u0026#34;EnableDns64\u0026#34;: false, 55 \u0026#34;Ipv6Native\u0026#34;: false, 56 \u0026#34;PrivateDnsNameOptionsOnLaunch\u0026#34;: { 57 \u0026#34;HostnameType\u0026#34;: \u0026#34;ip-name\u0026#34;, 58 \u0026#34;EnableResourceNameDnsARecord\u0026#34;: false, 59 \u0026#34;EnableResourceNameDnsAAAARecord\u0026#34;: false 60 } 61 }, 62 { 63 \u0026#34;AvailabilityZone\u0026#34;: \u0026#34;us-east-1a\u0026#34;, 64 \u0026#34;AvailabilityZoneId\u0026#34;: \u0026#34;use1-az6\u0026#34;, 65 \u0026#34;AvailableIpAddressCount\u0026#34;: 11, 66 \u0026#34;CidrBlock\u0026#34;: \u0026#34;10.0.10.128/28\u0026#34;, 67 \u0026#34;DefaultForAz\u0026#34;: false, 68 \u0026#34;MapPublicIpOnLaunch\u0026#34;: false, 69 \u0026#34;MapCustomerOwnedIpOnLaunch\u0026#34;: false, 70 \u0026#34;State\u0026#34;: \u0026#34;available\u0026#34;, 71 \u0026#34;SubnetId\u0026#34;: \u0026#34;subnet-0c363777a7f301bc2\u0026#34;, 72 \u0026#34;VpcId\u0026#34;: \u0026#34;vpc-08aee6f377637f9ae\u0026#34;, 73 \u0026#34;OwnerId\u0026#34;: \u0026#34; \u0026#34;, 74 \u0026#34;AssignIpv6AddressOnCreation\u0026#34;: false, 75 \u0026#34;Ipv6CidrBlockAssociationSet\u0026#34;: [], 76 \u0026#34;Tags\u0026#34;: [ 77 { 78 \u0026#34;Key\u0026#34;: \u0026#34;Name\u0026#34;, 79 \u0026#34;Value\u0026#34;: \u0026#34;AWS-UE1-VPC-MGMT -subnet-private1-us-east-1a\u0026#34; 80 } 81 ], 82 \u0026#34;SubnetArn\u0026#34;: \u0026#34;arn:aws:ec2:us-east-1: :subnet/subnet-0c363777a7f301bc2\u0026#34;, 83 \u0026#34;EnableDns64\u0026#34;: false, 84 \u0026#34;Ipv6Native\u0026#34;: false, 85 \u0026#34;PrivateDnsNameOptionsOnLaunch\u0026#34;: { 86 \u0026#34;HostnameType\u0026#34;: \u0026#34;ip-name\u0026#34;, 87 \u0026#34;EnableResourceNameDnsARecord\u0026#34;: false, 88 \u0026#34;EnableResourceNameDnsAAAARecord\u0026#34;: false 89 } 90 }, 91 { 92 \u0026#34;AvailabilityZone\u0026#34;: \u0026#34;us-east-1a\u0026#34;, 93 \u0026#34;AvailabilityZoneId\u0026#34;: \u0026#34;use1-az6\u0026#34;, 94 \u0026#34;AvailableIpAddressCount\u0026#34;: 11, 95 \u0026#34;CidrBlock\u0026#34;: \u0026#34;10.0.10.0/28\u0026#34;, 96 \u0026#34;DefaultForAz\u0026#34;: false, 97 \u0026#34;MapPublicIpOnLaunch\u0026#34;: false, 98 \u0026#34;MapCustomerOwnedIpOnLaunch\u0026#34;: false, 99 \u0026#34;State\u0026#34;: \u0026#34;available\u0026#34;, 100 \u0026#34;SubnetId\u0026#34;: \u0026#34;subnet-0f2351620e76a54d7\u0026#34;, 101 \u0026#34;VpcId\u0026#34;: \u0026#34;vpc-08aee6f377637f9ae\u0026#34;, 102 \u0026#34;OwnerId\u0026#34;: \u0026#34; \u0026#34;, 103 \u0026#34;AssignIpv6AddressOnCreation\u0026#34;: false, 104 \u0026#34;Ipv6CidrBlockAssociationSet\u0026#34;: [], 105 \u0026#34;Tags\u0026#34;: [ 106 { 107 \u0026#34;Key\u0026#34;: \u0026#34;Name\u0026#34;, 108 \u0026#34;Value\u0026#34;: \u0026#34;AWS-UE1-VPC-MGMT -subnet-public1-us-east-1a\u0026#34; 109 } 110 ], 111 \u0026#34;SubnetArn\u0026#34;: \u0026#34;arn:aws:ec2:us-east-1: :subnet/subnet-0f2351620e76a54d7\u0026#34;, 112 \u0026#34;EnableDns64\u0026#34;: false, 113 \u0026#34;Ipv6Native\u0026#34;: false, 114 \u0026#34;PrivateDnsNameOptionsOnLaunch\u0026#34;: { 115 \u0026#34;HostnameType\u0026#34;: \u0026#34;ip-name\u0026#34;, 116 \u0026#34;EnableResourceNameDnsARecord\u0026#34;: false, 117 \u0026#34;EnableResourceNameDnsAAAARecord\u0026#34;: false 118 } 119 } 120 ] 121} Then we can have a look at the route tables that are associated with the VPC created previously.\n1 2$ aws ec2 describe-route-tables --filters \u0026#34;Name=vpc-id,Values=vpc-08aee6f377637f9ae\u0026#34; | jq 1{ 2 \u0026#34;RouteTables\u0026#34;: [ 3 { 4 \u0026#34;Associations\u0026#34;: [ 5 { 6 \u0026#34;Main\u0026#34;: false, 7 \u0026#34;RouteTableAssociationId\u0026#34;: \u0026#34;rtbassoc-02429aa65c6ca4696\u0026#34;, 8 \u0026#34;RouteTableId\u0026#34;: \u0026#34;rtb-04083da70542085d7\u0026#34;, 9 \u0026#34;SubnetId\u0026#34;: \u0026#34;subnet-0f75d35ae1da469cc\u0026#34;, 10 \u0026#34;AssociationState\u0026#34;: { 11 \u0026#34;State\u0026#34;: \u0026#34;associated\u0026#34; 12 } 13 } 14 ], 15 \u0026#34;PropagatingVgws\u0026#34;: [], 16 \u0026#34;RouteTableId\u0026#34;: \u0026#34;rtb-04083da70542085d7\u0026#34;, 17 \u0026#34;Routes\u0026#34;: [ 18 { 19 \u0026#34;DestinationCidrBlock\u0026#34;: \u0026#34;10.0.10.0/24\u0026#34;, 20 \u0026#34;GatewayId\u0026#34;: \u0026#34;local\u0026#34;, 21 \u0026#34;Origin\u0026#34;: \u0026#34;CreateRouteTable\u0026#34;, 22 \u0026#34;State\u0026#34;: \u0026#34;active\u0026#34; 23 }, 24 { 25 \u0026#34;DestinationPrefixListId\u0026#34;: \u0026#34;pl-63a5400a\u0026#34;, 26 \u0026#34;GatewayId\u0026#34;: \u0026#34;vpce-07c5489eece54ac5c\u0026#34;, 27 \u0026#34;Origin\u0026#34;: \u0026#34;CreateRoute\u0026#34;, 28 \u0026#34;State\u0026#34;: \u0026#34;active\u0026#34; 29 } 30 ], 31 \u0026#34;Tags\u0026#34;: [ 32 { 33 \u0026#34;Key\u0026#34;: \u0026#34;Name\u0026#34;, 34 \u0026#34;Value\u0026#34;: \u0026#34;AWS-UE1-VPC-MGMT -rtb-private2-us-east-1b\u0026#34; 35 } 36 ], 37 \u0026#34;VpcId\u0026#34;: \u0026#34;vpc-08aee6f377637f9ae\u0026#34;, 38 \u0026#34;OwnerId\u0026#34;: \u0026#34; \u0026#34; 39 }, 40 { 41 \u0026#34;Associations\u0026#34;: [ 42 { 43 \u0026#34;Main\u0026#34;: true, 44 \u0026#34;RouteTableAssociationId\u0026#34;: \u0026#34;rtbassoc-032f087a7405940dd\u0026#34;, 45 \u0026#34;RouteTableId\u0026#34;: \u0026#34;rtb-050a2ad500f057f3b\u0026#34;, 46 \u0026#34;AssociationState\u0026#34;: { 47 \u0026#34;State\u0026#34;: \u0026#34;associated\u0026#34; 48 } 49 } 50 ], 51 \u0026#34;PropagatingVgws\u0026#34;: [], 52 \u0026#34;RouteTableId\u0026#34;: \u0026#34;rtb-050a2ad500f057f3b\u0026#34;, 53 \u0026#34;Routes\u0026#34;: [ 54 { 55 \u0026#34;DestinationCidrBlock\u0026#34;: \u0026#34;10.0.10.0/24\u0026#34;, 56 \u0026#34;GatewayId\u0026#34;: \u0026#34;local\u0026#34;, 57 \u0026#34;Origin\u0026#34;: \u0026#34;CreateRouteTable\u0026#34;, 58 \u0026#34;State\u0026#34;: \u0026#34;active\u0026#34; 59 } 60 ], 61 \u0026#34;Tags\u0026#34;: [], 62 \u0026#34;VpcId\u0026#34;: \u0026#34;vpc-08aee6f377637f9ae\u0026#34;, 63 \u0026#34;OwnerId\u0026#34;: \u0026#34; \u0026#34; 64 }, 65 { 66 \u0026#34;Associations\u0026#34;: [ 67 { 68 \u0026#34;Main\u0026#34;: false, 69 \u0026#34;RouteTableAssociationId\u0026#34;: \u0026#34;rtbassoc-049270142f38cc317\u0026#34;, 70 \u0026#34;RouteTableId\u0026#34;: \u0026#34;rtb-0726a61879b6886c8\u0026#34;, 71 \u0026#34;SubnetId\u0026#34;: \u0026#34;subnet-07c81d6d42836a8f9\u0026#34;, 72 \u0026#34;AssociationState\u0026#34;: { 73 \u0026#34;State\u0026#34;: \u0026#34;associated\u0026#34; 74 } 75 }, 76 { 77 \u0026#34;Main\u0026#34;: false, 78 \u0026#34;RouteTableAssociationId\u0026#34;: \u0026#34;rtbassoc-0f4a7bb9b742f8840\u0026#34;, 79 \u0026#34;RouteTableId\u0026#34;: \u0026#34;rtb-0726a61879b6886c8\u0026#34;, 80 \u0026#34;SubnetId\u0026#34;: \u0026#34;subnet-0f2351620e76a54d7\u0026#34;, 81 \u0026#34;AssociationState\u0026#34;: { 82 \u0026#34;State\u0026#34;: \u0026#34;associated\u0026#34; 83 } 84 } 85 ], 86 \u0026#34;PropagatingVgws\u0026#34;: [], 87 \u0026#34;RouteTableId\u0026#34;: \u0026#34;rtb-0726a61879b6886c8\u0026#34;, 88 \u0026#34;Routes\u0026#34;: [ 89 { 90 \u0026#34;DestinationCidrBlock\u0026#34;: \u0026#34;10.0.10.0/24\u0026#34;, 91 \u0026#34;GatewayId\u0026#34;: \u0026#34;local\u0026#34;, 92 \u0026#34;Origin\u0026#34;: \u0026#34;CreateRouteTable\u0026#34;, 93 \u0026#34;State\u0026#34;: \u0026#34;active\u0026#34; 94 }, 95 { 96 \u0026#34;DestinationCidrBlock\u0026#34;: \u0026#34;0.0.0.0/0\u0026#34;, 97 \u0026#34;GatewayId\u0026#34;: \u0026#34;igw-08cb7b3514b815ae0\u0026#34;, 98 \u0026#34;Origin\u0026#34;: \u0026#34;CreateRoute\u0026#34;, 99 \u0026#34;State\u0026#34;: \u0026#34;active\u0026#34; 100 } 101 ], 102 \u0026#34;Tags\u0026#34;: [ 103 { 104 \u0026#34;Key\u0026#34;: \u0026#34;Name\u0026#34;, 105 \u0026#34;Value\u0026#34;: \u0026#34;AWS-UE1-VPC-MGMT -rtb-public\u0026#34; 106 } 107 ], 108 \u0026#34;VpcId\u0026#34;: \u0026#34;vpc-08aee6f377637f9ae\u0026#34;, 109 \u0026#34;OwnerId\u0026#34;: \u0026#34; \u0026#34; 110 }, 111 { 112 \u0026#34;Associations\u0026#34;: [ 113 { 114 \u0026#34;Main\u0026#34;: false, 115 \u0026#34;RouteTableAssociationId\u0026#34;: \u0026#34;rtbassoc-0a9141e0861dbca9c\u0026#34;, 116 \u0026#34;RouteTableId\u0026#34;: \u0026#34;rtb-0bbeb2d8088d29033\u0026#34;, 117 \u0026#34;SubnetId\u0026#34;: \u0026#34;subnet-0c363777a7f301bc2\u0026#34;, 118 \u0026#34;AssociationState\u0026#34;: { 119 \u0026#34;State\u0026#34;: \u0026#34;associated\u0026#34; 120 } 121 } 122 ], 123 \u0026#34;PropagatingVgws\u0026#34;: [], 124 \u0026#34;RouteTableId\u0026#34;: \u0026#34;rtb-0bbeb2d8088d29033\u0026#34;, 125 \u0026#34;Routes\u0026#34;: [ 126 { 127 \u0026#34;DestinationCidrBlock\u0026#34;: \u0026#34;10.0.10.0/24\u0026#34;, 128 \u0026#34;GatewayId\u0026#34;: \u0026#34;local\u0026#34;, 129 \u0026#34;Origin\u0026#34;: \u0026#34;CreateRouteTable\u0026#34;, 130 \u0026#34;State\u0026#34;: \u0026#34;active\u0026#34; 131 }, 132 { 133 \u0026#34;DestinationPrefixListId\u0026#34;: \u0026#34;pl-63a5400a\u0026#34;, 134 \u0026#34;GatewayId\u0026#34;: \u0026#34;vpce-07c5489eece54ac5c\u0026#34;, 135 \u0026#34;Origin\u0026#34;: \u0026#34;CreateRoute\u0026#34;, 136 \u0026#34;State\u0026#34;: \u0026#34;active\u0026#34; 137 } 138 ], 139 \u0026#34;Tags\u0026#34;: [dzoo 140 { 141 \u0026#34;Key\u0026#34;: \u0026#34;Name\u0026#34;, 142 \u0026#34;Value\u0026#34;: \u0026#34;AWS-UE1-VPC-MGMT -rtb-private1-us-east-1a\u0026#34; 143 } 144 ], 145 \u0026#34;VpcId\u0026#34;: \u0026#34;vpc-08aee6f377637f9ae\u0026#34;, 146 \u0026#34;OwnerId\u0026#34;: \u0026#34; \u0026#34; 147 } 148 ] 149} Finally, let's dig deeper and have a look at the public routing tables entries and how it is associated.\nWe can see that this routing table is shared with 2 subnets: subnet-07c81d6d42836a8f9 and subnet-0f2351620e76a54d7 (both public subnets in the VPC on different AZ).\nThe routing table has the 2 entries mentionned above:\n10.0.10.0/24 for the local subnet 0.0.0.0/0 that points to the internet gateway (igw-08cb7b3514b815ae0) used by the public subnet in the VPC 1aws ec2 describe-route-tables --filters \u0026#34;Name=tag:Name,Values=AWS-UE1-VPC-MGMT -rtb-public\u0026#34; | jq 1{ 2 \u0026#34;RouteTables\u0026#34;: [ 3 { 4 \u0026#34;Associations\u0026#34;: [ 5 { 6 \u0026#34;Main\u0026#34;: false, 7 \u0026#34;RouteTableAssociationId\u0026#34;: \u0026#34;rtbassoc-049270142f38cc317\u0026#34;, 8 \u0026#34;RouteTableId\u0026#34;: \u0026#34;rtb-0726a61879b6886c8\u0026#34;, 9 \u0026#34;SubnetId\u0026#34;: \u0026#34;subnet-07c81d6d42836a8f9\u0026#34;, 10 \u0026#34;AssociationState\u0026#34;: { 11 \u0026#34;State\u0026#34;: \u0026#34;associated\u0026#34; 12 } 13 }, 14 { 15 \u0026#34;Main\u0026#34;: false, 16 \u0026#34;RouteTableAssociationId\u0026#34;: \u0026#34;rtbassoc-0f4a7bb9b742f8840\u0026#34;, 17 \u0026#34;RouteTableId\u0026#34;: \u0026#34;rtb-0726a61879b6886c8\u0026#34;, 18 \u0026#34;SubnetId\u0026#34;: \u0026#34;subnet-0f2351620e76a54d7\u0026#34;, 19 \u0026#34;AssociationState\u0026#34;: { 20 \u0026#34;State\u0026#34;: \u0026#34;associated\u0026#34; 21 } 22 } 23 ], 24 \u0026#34;PropagatingVgws\u0026#34;: [], 25 \u0026#34;RouteTableId\u0026#34;: \u0026#34;rtb-0726a61879b6886c8\u0026#34;, 26 \u0026#34;Routes\u0026#34;: [ 27 { 28 \u0026#34;DestinationCidrBlock\u0026#34;: \u0026#34;10.0.10.0/24\u0026#34;, 29 \u0026#34;GatewayId\u0026#34;: \u0026#34;local\u0026#34;, 30 \u0026#34;Origin\u0026#34;: \u0026#34;CreateRouteTable\u0026#34;, 31 \u0026#34;State\u0026#34;: \u0026#34;active\u0026#34; 32 }, 33 { 34 \u0026#34;DestinationCidrBlock\u0026#34;: \u0026#34;0.0.0.0/0\u0026#34;, 35 \u0026#34;GatewayId\u0026#34;: \u0026#34;igw-08cb7b3514b815ae0\u0026#34;, 36 \u0026#34;Origin\u0026#34;: \u0026#34;CreateRoute\u0026#34;, 37 \u0026#34;State\u0026#34;: \u0026#34;active\u0026#34; 38 } 39 ], 40 \u0026#34;Tags\u0026#34;: [ 41 { 42 \u0026#34;Key\u0026#34;: \u0026#34;Name\u0026#34;, 43 \u0026#34;Value\u0026#34;: \u0026#34;AWS-UE1-VPC-MGMT -rtb-public\u0026#34; 44 } 45 ], 46 \u0026#34;VpcId\u0026#34;: \u0026#34;vpc-08aee6f377637f9ae\u0026#34;, 47 \u0026#34;OwnerId\u0026#34;: \u0026#34; \u0026#34; 48 } 49 ] 50} last edited: October 28th 2022\n","link":"https://blog.vpackets.net/post/aws/networking/manual-vpc/","section":"post","tags":["AWS","VPC"],"title":"Create a VPC - Manual"},{"body":"In a previous blogpost we managed to manually create a simple VPC that could host several services or traditionnal EC2 instances. This process was quite simple using the AWS console as it would deploy all the network construct within a VPC (Subnets, Route Tables, Internet Gateways etc...)\nI have been deploying network infrastructure (NSX, Cumulus, Cisco ...) for the past few years using Infrastructure as Code and naturally I will show you how to deploy networking cloud constructs related to AWS (not only !) using Terraform.\nFirst, Terraform will need a way to authenticate with AWS (covered in this documentation, this AWS documentation is also very valuable).\nThere are plenty of examples on the Internet for this but the official terraform aws module is quite complete, it points to a GitHub repo that is very well presented and easy to follow.\nMy code for this particular deployment is very simple:\n1 2provider \u0026#34;aws\u0026#34; { 3 shared_config_files = [\u0026#34;/Users/nmichel/.aws/config\u0026#34;] 4 shared_credentials_files = [\u0026#34;/Users/nmichel/.aws/credentials\u0026#34;] 5 #profile = \u0026#34;default\u0026#34; 6 region = \u0026#34;us-east-1\u0026#34; 7} 8 9locals { 10 name = \u0026#34;AWS-UE1-VPC-MGMT\u0026#34; 11 region = \u0026#34;us-east-1\u0026#34; 12 tags = { 13 Owner = \u0026#34;Nicolas MICHEL\u0026#34; 14 Environment = \u0026#34;IT Services\u0026#34; 15 #Name = \u0026#34;AWS-UE1-VPC-MGMT\u0026#34; 16 } 17} 18 19 20module \u0026#34;vpc\u0026#34; { 21 source = \u0026#34;terraform-aws-modules/vpc/aws\u0026#34; 22 version = \u0026#34;3.14.2\u0026#34; 23 name = \u0026#34;AWS-UE1-VPC-MGMT\u0026#34; 24 cidr = \u0026#34;10.0.10.0/24\u0026#34; 25 26 azs = [\u0026#34;${local.region}a\u0026#34;, \u0026#34;${local.region}b\u0026#34;] 27 private_subnets = [\u0026#34;10.0.10.96/28\u0026#34;, \u0026#34;10.0.10.112/28\u0026#34;] 28 public_subnets = [\u0026#34;10.0.10.0/28\u0026#34;, \u0026#34;10.0.10.16/28\u0026#34;] 29 30 enable_nat_gateway = false 31 enable_vpn_gateway = false 32 33 manage_default_route_table = true 34 default_route_table_tags = { Name = \u0026#34;${local.name}-default\u0026#34; } 35 36 37 tags = local.tags 38} 39 40resource \u0026#34;aws_security_group\u0026#34; \u0026#34;allow_ssh\u0026#34; { 41 name = \u0026#34;SG-vPackets-MGMT\u0026#34; 42 description = \u0026#34;Allow SSH/HTTPS inbound traffic\u0026#34; 43 vpc_id = module.vpc.vpc_id 44 #vpc_id = aws_vpc.main.id 45 46 ingress { 47 description = \u0026#34;SSH from VPC\u0026#34; 48 from_port = 22 49 to_port = 22 50 protocol = \u0026#34;tcp\u0026#34; 51 cidr_blocks = [\u0026#34;YOUR_IP\u0026#34;] 52 #ipv6_cidr_blocks = [aws_vpc.main.ipv6_cidr_block] 53 } 54 ingress { 55 description = \u0026#34;TLS from VPC\u0026#34; 56 from_port = 443 57 to_port = 443 58 protocol = \u0026#34;tcp\u0026#34; 59 cidr_blocks = [\u0026#34;YOUR_IP\u0026#34;] 60 #ipv6_cidr_blocks = [aws_vpc.main.ipv6_cidr_block] 61 } 62 63 egress { 64 from_port = 0 65 to_port = 0 66 protocol = \u0026#34;-1\u0026#34; 67 cidr_blocks = [\u0026#34;0.0.0.0/0\u0026#34;] 68 ipv6_cidr_blocks = [\u0026#34;::/0\u0026#34;] 69 } 70 71 tags = { 72 Name = \u0026#34;SG-vPackets-MGMT\u0026#34; 73 } 74} Same as previously it will create a simple VPC in 10 seconds and will allow me to install all my EC2 instances workloads. The only difference here is that I have included a Security Group that will allow inbound SSH and TLS traffic into EC2 instances linked with that Security Group. (please include your IP in the security group).\n1$ terraform plan 2 3Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following 4symbols: 5 + create 6 7Terraform will perform the following actions: 8 9 # module.vpc.aws_default_route_table.default[0] will be created 10 + resource \u0026#34;aws_default_route_table\u0026#34; \u0026#34;default\u0026#34; { 11 + arn = (known after apply) 12 + default_route_table_id = (known after apply) 13 + id = (known after apply) 14 + owner_id = (known after apply) 15 + route = (known after apply) 16 + tags = { 17 + \u0026#34;Environment\u0026#34; = \u0026#34;IT Services\u0026#34; 18 + \u0026#34;Name\u0026#34; = \u0026#34;AWS-UE1-VPC-MGMT-default\u0026#34; 19 + \u0026#34;Owner\u0026#34; = \u0026#34;Nicolas MICHEL\u0026#34; 20 } 21 + tags_all = { 22 + \u0026#34;Environment\u0026#34; = \u0026#34;IT Services\u0026#34; 23 + \u0026#34;Name\u0026#34; = \u0026#34;AWS-UE1-VPC-MGMT-default\u0026#34; 24 + \u0026#34;Owner\u0026#34; = \u0026#34;Nicolas MICHEL\u0026#34; 25 } 26 + vpc_id = (known after apply) 27 28 + timeouts { 29 + create = \u0026#34;5m\u0026#34; 30 + update = \u0026#34;5m\u0026#34; 31 } 32 } 33 34 # module.vpc.aws_internet_gateway.this[0] will be created 35 + resource \u0026#34;aws_internet_gateway\u0026#34; \u0026#34;this\u0026#34; { 36 + arn = (known after apply) 37 + id = (known after apply) 38 + owner_id = (known after apply) 39 + tags = { 40 + \u0026#34;Environment\u0026#34; = \u0026#34;IT Services\u0026#34; 41 + \u0026#34;Name\u0026#34; = \u0026#34;AWS-UE1-VPC-MGMT\u0026#34; 42 + \u0026#34;Owner\u0026#34; = \u0026#34;Nicolas MICHEL\u0026#34; 43 } 44 + tags_all = { 45 + \u0026#34;Environment\u0026#34; = \u0026#34;IT Services\u0026#34; 46 + \u0026#34;Name\u0026#34; = \u0026#34;AWS-UE1-VPC-MGMT\u0026#34; 47 + \u0026#34;Owner\u0026#34; = \u0026#34;Nicolas MICHEL\u0026#34; 48 } 49 + vpc_id = (known after apply) 50 } 51 52 # module.vpc.aws_route.public_internet_gateway[0] will be created 53 + resource \u0026#34;aws_route\u0026#34; \u0026#34;public_internet_gateway\u0026#34; { 54 + destination_cidr_block = \u0026#34;0.0.0.0/0\u0026#34; 55 + gateway_id = (known after apply) 56 + id = (known after apply) 57 + instance_id = (known after apply) 58 + instance_owner_id = (known after apply) 59 + network_interface_id = (known after apply) 60 + origin = (known after apply) 61 + route_table_id = (known after apply) 62 + state = (known after apply) 63 64 + timeouts { 65 + create = \u0026#34;5m\u0026#34; 66 } 67 } 68 69 # module.vpc.aws_route_table.private[0] will be created 70 + resource \u0026#34;aws_route_table\u0026#34; \u0026#34;private\u0026#34; { 71 + arn = (known after apply) 72 + id = (known after apply) 73 + owner_id = (known after apply) 74 + propagating_vgws = (known after apply) 75 + route = (known after apply) 76 + tags = { 77 + \u0026#34;Environment\u0026#34; = \u0026#34;IT Services\u0026#34; 78 + \u0026#34;Name\u0026#34; = \u0026#34;AWS-UE1-VPC-MGMT-private-us-east-1a\u0026#34; 79 + \u0026#34;Owner\u0026#34; = \u0026#34;Nicolas MICHEL\u0026#34; 80 } 81 + tags_all = { 82 + \u0026#34;Environment\u0026#34; = \u0026#34;IT Services\u0026#34; 83 + \u0026#34;Name\u0026#34; = \u0026#34;AWS-UE1-VPC-MGMT-private-us-east-1a\u0026#34; 84 + \u0026#34;Owner\u0026#34; = \u0026#34;Nicolas MICHEL\u0026#34; 85 } 86 + vpc_id = (known after apply) 87 } 88 89 # module.vpc.aws_route_table.private[1] will be created 90 + resource \u0026#34;aws_route_table\u0026#34; \u0026#34;private\u0026#34; { 91 + arn = (known after apply) 92 + id = (known after apply) 93 + owner_id = (known after apply) 94 + propagating_vgws = (known after apply) 95 + route = (known after apply) 96 + tags = { 97 + \u0026#34;Environment\u0026#34; = \u0026#34;IT Services\u0026#34; 98 + \u0026#34;Name\u0026#34; = \u0026#34;AWS-UE1-VPC-MGMT-private-us-east-1b\u0026#34; 99 + \u0026#34;Owner\u0026#34; = \u0026#34;Nicolas MICHEL\u0026#34; 100 } 101 + tags_all = { 102 + \u0026#34;Environment\u0026#34; = \u0026#34;IT Services\u0026#34; 103 + \u0026#34;Name\u0026#34; = \u0026#34;AWS-UE1-VPC-MGMT-private-us-east-1b\u0026#34; 104 + \u0026#34;Owner\u0026#34; = \u0026#34;Nicolas MICHEL\u0026#34; 105 } 106 + vpc_id = (known after apply) 107 } 108 109 # module.vpc.aws_route_table.public[0] will be created 110 + resource \u0026#34;aws_route_table\u0026#34; \u0026#34;public\u0026#34; { 111 + arn = (known after apply) 112 + id = (known after apply) 113 + owner_id = (known after apply) 114 + propagating_vgws = (known after apply) 115 + route = (known after apply) 116 + tags = { 117 + \u0026#34;Environment\u0026#34; = \u0026#34;IT Services\u0026#34; 118 + \u0026#34;Name\u0026#34; = \u0026#34;AWS-UE1-VPC-MGMT-public\u0026#34; 119 + \u0026#34;Owner\u0026#34; = \u0026#34;Nicolas MICHEL\u0026#34; 120 } 121 + tags_all = { 122 + \u0026#34;Environment\u0026#34; = \u0026#34;IT Services\u0026#34; 123 + \u0026#34;Name\u0026#34; = \u0026#34;AWS-UE1-VPC-MGMT-public\u0026#34; 124 + \u0026#34;Owner\u0026#34; = \u0026#34;Nicolas MICHEL\u0026#34; 125 } 126 + vpc_id = (known after apply) 127 } 128 129 # module.vpc.aws_route_table_association.private[0] will be created 130 + resource \u0026#34;aws_route_table_association\u0026#34; \u0026#34;private\u0026#34; { 131 + id = (known after apply) 132 + route_table_id = (known after apply) 133 + subnet_id = (known after apply) 134 } 135 136 # module.vpc.aws_route_table_association.private[1] will be created 137 + resource \u0026#34;aws_route_table_association\u0026#34; \u0026#34;private\u0026#34; { 138 + id = (known after apply) 139 + route_table_id = (known after apply) 140 + subnet_id = (known after apply) 141 } 142 143 # module.vpc.aws_route_table_association.public[0] will be created 144 + resource \u0026#34;aws_route_table_association\u0026#34; \u0026#34;public\u0026#34; { 145 + id = (known after apply) 146 + route_table_id = (known after apply) 147 + subnet_id = (known after apply) 148 } 149 150 # module.vpc.aws_route_table_association.public[1] will be created 151 + resource \u0026#34;aws_route_table_association\u0026#34; \u0026#34;public\u0026#34; { 152 + id = (known after apply) 153 + route_table_id = (known after apply) 154 + subnet_id = (known after apply) 155 } 156 157 # module.vpc.aws_subnet.private[0] will be created 158 + resource \u0026#34;aws_subnet\u0026#34; \u0026#34;private\u0026#34; { 159 + arn = (known after apply) 160 + assign_ipv6_address_on_creation = false 161 + availability_zone = \u0026#34;us-east-1a\u0026#34; 162 + availability_zone_id = (known after apply) 163 + cidr_block = \u0026#34;10.0.10.96/28\u0026#34; 164 + enable_dns64 = false 165 + enable_resource_name_dns_a_record_on_launch = false 166 + enable_resource_name_dns_aaaa_record_on_launch = false 167 + id = (known after apply) 168 + ipv6_cidr_block_association_id = (known after apply) 169 + ipv6_native = false 170 + map_public_ip_on_launch = false 171 + owner_id = (known after apply) 172 + private_dns_hostname_type_on_launch = (known after apply) 173 + tags = { 174 + \u0026#34;Environment\u0026#34; = \u0026#34;IT Services\u0026#34; 175 + \u0026#34;Name\u0026#34; = \u0026#34;AWS-UE1-VPC-MGMT-private-us-east-1a\u0026#34; 176 + \u0026#34;Owner\u0026#34; = \u0026#34;Nicolas MICHEL\u0026#34; 177 } 178 + tags_all = { 179 + \u0026#34;Environment\u0026#34; = \u0026#34;IT Services\u0026#34; 180 + \u0026#34;Name\u0026#34; = \u0026#34;AWS-UE1-VPC-MGMT-private-us-east-1a\u0026#34; 181 + \u0026#34;Owner\u0026#34; = \u0026#34;Nicolas MICHEL\u0026#34; 182 } 183 + vpc_id = (known after apply) 184 } 185 186 # module.vpc.aws_subnet.private[1] will be created 187 + resource \u0026#34;aws_subnet\u0026#34; \u0026#34;private\u0026#34; { 188 + arn = (known after apply) 189 + assign_ipv6_address_on_creation = false 190 + availability_zone = \u0026#34;us-east-1b\u0026#34; 191 + availability_zone_id = (known after apply) 192 + cidr_block = \u0026#34;10.0.10.112/28\u0026#34; 193 + enable_dns64 = false 194 + enable_resource_name_dns_a_record_on_launch = false 195 + enable_resource_name_dns_aaaa_record_on_launch = false 196 + id = (known after apply) 197 + ipv6_cidr_block_association_id = (known after apply) 198 + ipv6_native = false 199 + map_public_ip_on_launch = false 200 + owner_id = (known after apply) 201 + private_dns_hostname_type_on_launch = (known after apply) 202 + tags = { 203 + \u0026#34;Environment\u0026#34; = \u0026#34;IT Services\u0026#34; 204 + \u0026#34;Name\u0026#34; = \u0026#34;AWS-UE1-VPC-MGMT-private-us-east-1b\u0026#34; 205 + \u0026#34;Owner\u0026#34; = \u0026#34;Nicolas MICHEL\u0026#34; 206 } 207 + tags_all = { 208 + \u0026#34;Environment\u0026#34; = \u0026#34;IT Services\u0026#34; 209 + \u0026#34;Name\u0026#34; = \u0026#34;AWS-UE1-VPC-MGMT-private-us-east-1b\u0026#34; 210 + \u0026#34;Owner\u0026#34; = \u0026#34;Nicolas MICHEL\u0026#34; 211 } 212 + vpc_id = (known after apply) 213 } 214 215 # module.vpc.aws_subnet.public[0] will be created 216 + resource \u0026#34;aws_subnet\u0026#34; \u0026#34;public\u0026#34; { 217 + arn = (known after apply) 218 + assign_ipv6_address_on_creation = false 219 + availability_zone = \u0026#34;us-east-1a\u0026#34; 220 + availability_zone_id = (known after apply) 221 + cidr_block = \u0026#34;10.0.10.0/28\u0026#34; 222 + enable_dns64 = false 223 + enable_resource_name_dns_a_record_on_launch = false 224 + enable_resource_name_dns_aaaa_record_on_launch = false 225 + id = (known after apply) 226 + ipv6_cidr_block_association_id = (known after apply) 227 + ipv6_native = false 228 + map_public_ip_on_launch = true 229 + owner_id = (known after apply) 230 + private_dns_hostname_type_on_launch = (known after apply) 231 + tags = { 232 + \u0026#34;Environment\u0026#34; = \u0026#34;IT Services\u0026#34; 233 + \u0026#34;Name\u0026#34; = \u0026#34;AWS-UE1-VPC-MGMT-public-us-east-1a\u0026#34; 234 + \u0026#34;Owner\u0026#34; = \u0026#34;Nicolas MICHEL\u0026#34; 235 } 236 + tags_all = { 237 + \u0026#34;Environment\u0026#34; = \u0026#34;IT Services\u0026#34; 238 + \u0026#34;Name\u0026#34; = \u0026#34;AWS-UE1-VPC-MGMT-public-us-east-1a\u0026#34; 239 + \u0026#34;Owner\u0026#34; = \u0026#34;Nicolas MICHEL\u0026#34; 240 } 241 + vpc_id = (known after apply) 242 } 243 244 # module.vpc.aws_subnet.public[1] will be created 245 + resource \u0026#34;aws_subnet\u0026#34; \u0026#34;public\u0026#34; { 246 + arn = (known after apply) 247 + assign_ipv6_address_on_creation = false 248 + availability_zone = \u0026#34;us-east-1b\u0026#34; 249 + availability_zone_id = (known after apply) 250 + cidr_block = \u0026#34;10.0.10.16/28\u0026#34; 251 + enable_dns64 = false 252 + enable_resource_name_dns_a_record_on_launch = false 253 + enable_resource_name_dns_aaaa_record_on_launch = false 254 + id = (known after apply) 255 + ipv6_cidr_block_association_id = (known after apply) 256 + ipv6_native = false 257 + map_public_ip_on_launch = true 258 + owner_id = (known after apply) 259 + private_dns_hostname_type_on_launch = (known after apply) 260 + tags = { 261 + \u0026#34;Environment\u0026#34; = \u0026#34;IT Services\u0026#34; 262 + \u0026#34;Name\u0026#34; = \u0026#34;AWS-UE1-VPC-MGMT-public-us-east-1b\u0026#34; 263 + \u0026#34;Owner\u0026#34; = \u0026#34;Nicolas MICHEL\u0026#34; 264 } 265 + tags_all = { 266 + \u0026#34;Environment\u0026#34; = \u0026#34;IT Services\u0026#34; 267 + \u0026#34;Name\u0026#34; = \u0026#34;AWS-UE1-VPC-MGMT-public-us-east-1b\u0026#34; 268 + \u0026#34;Owner\u0026#34; = \u0026#34;Nicolas MICHEL\u0026#34; 269 } 270 + vpc_id = (known after apply) 271 } 272 273 # module.vpc.aws_vpc.this[0] will be created 274 + resource \u0026#34;aws_vpc\u0026#34; \u0026#34;this\u0026#34; { 275 + arn = (known after apply) 276 + assign_generated_ipv6_cidr_block = false 277 + cidr_block = \u0026#34;10.0.10.0/24\u0026#34; 278 + default_network_acl_id = (known after apply) 279 + default_route_table_id = (known after apply) 280 + default_security_group_id = (known after apply) 281 + dhcp_options_id = (known after apply) 282 + enable_classiclink = (known after apply) 283 + enable_classiclink_dns_support = (known after apply) 284 + enable_dns_hostnames = false 285 + enable_dns_support = true 286 + id = (known after apply) 287 + instance_tenancy = \u0026#34;default\u0026#34; 288 + ipv6_association_id = (known after apply) 289 + ipv6_cidr_block = (known after apply) 290 + ipv6_cidr_block_network_border_group = (known after apply) 291 + main_route_table_id = (known after apply) 292 + owner_id = (known after apply) 293 + tags = { 294 + \u0026#34;Environment\u0026#34; = \u0026#34;IT Services\u0026#34; 295 + \u0026#34;Name\u0026#34; = \u0026#34;AWS-UE1-VPC-MGMT\u0026#34; 296 + \u0026#34;Owner\u0026#34; = \u0026#34;Nicolas MICHEL\u0026#34; 297 } 298 + tags_all = { 299 + \u0026#34;Environment\u0026#34; = \u0026#34;IT Services\u0026#34; 300 + \u0026#34;Name\u0026#34; = \u0026#34;AWS-UE1-VPC-MGMT\u0026#34; 301 + \u0026#34;Owner\u0026#34; = \u0026#34;Nicolas MICHEL\u0026#34; 302 } 303 } 304 305Plan: 15 to add, 0 to change, 0 to destroy. 306 307──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── 308 309Note: You didn\u0026#39;t use the -out option to save this plan, so Terraform can\u0026#39;t guarantee to take exactly these actions if you run 310\u0026#34;terraform apply\u0026#34; now. Once you are ready to commit your configuration:\n1$ terraform apply --auto-approve 2 3Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following 4symbols: 5 + create 6 7Terraform will perform the following actions: 8 9 # module.vpc.aws_default_route_table.default[0] will be created 10 + resource \u0026#34;aws_default_route_table\u0026#34; \u0026#34;default\u0026#34; { 11 + arn = (known after apply) 12 + default_route_table_id = (known after apply) 13 + id = (known after apply) 14 + owner_id = (known after apply) 15 + route = (known after apply) 16 + tags = { 17 + \u0026#34;Environment\u0026#34; = \u0026#34;IT Services\u0026#34; 18 + \u0026#34;Name\u0026#34; = \u0026#34;AWS-UE1-VPC-MGMT-default\u0026#34; 19 + \u0026#34;Owner\u0026#34; = \u0026#34;Nicolas MICHEL\u0026#34; 20 } 21 + tags_all = { 22 + \u0026#34;Environment\u0026#34; = \u0026#34;IT Services\u0026#34; 23 + \u0026#34;Name\u0026#34; = \u0026#34;AWS-UE1-VPC-MGMT-default\u0026#34; 24 + \u0026#34;Owner\u0026#34; = \u0026#34;Nicolas MICHEL\u0026#34; 25 } 26 + vpc_id = (known after apply) 27 28 + timeouts { 29 + create = \u0026#34;5m\u0026#34; 30 + update = \u0026#34;5m\u0026#34; 31 } 32 } 33 34 # module.vpc.aws_internet_gateway.this[0] will be created 35 + resource \u0026#34;aws_internet_gateway\u0026#34; \u0026#34;this\u0026#34; { 36 + arn = (known after apply) 37 + id = (known after apply) 38 + owner_id = (known after apply) 39 + tags = { 40 + \u0026#34;Environment\u0026#34; = \u0026#34;IT Services\u0026#34; 41 + \u0026#34;Name\u0026#34; = \u0026#34;AWS-UE1-VPC-MGMT\u0026#34; 42 + \u0026#34;Owner\u0026#34; = \u0026#34;Nicolas MICHEL\u0026#34; 43 } 44 + tags_all = { 45 + \u0026#34;Environment\u0026#34; = \u0026#34;IT Services\u0026#34; 46 + \u0026#34;Name\u0026#34; = \u0026#34;AWS-UE1-VPC-MGMT\u0026#34; 47 + \u0026#34;Owner\u0026#34; = \u0026#34;Nicolas MICHEL\u0026#34; 48 } 49 + vpc_id = (known after apply) 50 } 51 52 # module.vpc.aws_route.public_internet_gateway[0] will be created 53 + resource \u0026#34;aws_route\u0026#34; \u0026#34;public_internet_gateway\u0026#34; { 54 + destination_cidr_block = \u0026#34;0.0.0.0/0\u0026#34; 55 + gateway_id = (known after apply) 56 + id = (known after apply) 57 + instance_id = (known after apply) 58 + instance_owner_id = (known after apply) 59 + network_interface_id = (known after apply) 60 + origin = (known after apply) 61 + route_table_id = (known after apply) 62 + state = (known after apply) 63 64 + timeouts { 65 + create = \u0026#34;5m\u0026#34; 66 } 67 } 68 69 # module.vpc.aws_route_table.private[0] will be created 70 + resource \u0026#34;aws_route_table\u0026#34; \u0026#34;private\u0026#34; { 71 + arn = (known after apply) 72 + id = (known after apply) 73 + owner_id = (known after apply) 74 + propagating_vgws = (known after apply) 75 + route = (known after apply) 76 + tags = { 77 + \u0026#34;Environment\u0026#34; = \u0026#34;IT Services\u0026#34; 78 + \u0026#34;Name\u0026#34; = \u0026#34;AWS-UE1-VPC-MGMT-private-us-east-1a\u0026#34; 79 + \u0026#34;Owner\u0026#34; = \u0026#34;Nicolas MICHEL\u0026#34; 80 } 81 + tags_all = { 82 + \u0026#34;Environment\u0026#34; = \u0026#34;IT Services\u0026#34; 83 + \u0026#34;Name\u0026#34; = \u0026#34;AWS-UE1-VPC-MGMT-private-us-east-1a\u0026#34; 84 + \u0026#34;Owner\u0026#34; = \u0026#34;Nicolas MICHEL\u0026#34; 85 } 86 + vpc_id = (known after apply) 87 } 88 89 # module.vpc.aws_route_table.private[1] will be created 90 + resource \u0026#34;aws_route_table\u0026#34; \u0026#34;private\u0026#34; { 91 + arn = (known after apply) 92 + id = (known after apply) 93 + owner_id = (known after apply) 94 + propagating_vgws = (known after apply) 95 + route = (known after apply) 96 + tags = { 97 + \u0026#34;Environment\u0026#34; = \u0026#34;IT Services\u0026#34; 98 + \u0026#34;Name\u0026#34; = \u0026#34;AWS-UE1-VPC-MGMT-private-us-east-1b\u0026#34; 99 + \u0026#34;Owner\u0026#34; = \u0026#34;Nicolas MICHEL\u0026#34; 100 } 101 + tags_all = { 102 + \u0026#34;Environment\u0026#34; = \u0026#34;IT Services\u0026#34; 103 + \u0026#34;Name\u0026#34; = \u0026#34;AWS-UE1-VPC-MGMT-private-us-east-1b\u0026#34; 104 + \u0026#34;Owner\u0026#34; = \u0026#34;Nicolas MICHEL\u0026#34; 105 } 106 + vpc_id = (known after apply) 107 } 108 109 # module.vpc.aws_route_table.public[0] will be created 110 + resource \u0026#34;aws_route_table\u0026#34; \u0026#34;public\u0026#34; { 111 + arn = (known after apply) 112 + id = (known after apply) 113 + owner_id = (known after apply) 114 + propagating_vgws = (known after apply) 115 + route = (known after apply) 116 + tags = { 117 + \u0026#34;Environment\u0026#34; = \u0026#34;IT Services\u0026#34; 118 + \u0026#34;Name\u0026#34; = \u0026#34;AWS-UE1-VPC-MGMT-public\u0026#34; 119 + \u0026#34;Owner\u0026#34; = \u0026#34;Nicolas MICHEL\u0026#34; 120 } 121 + tags_all = { 122 + \u0026#34;Environment\u0026#34; = \u0026#34;IT Services\u0026#34; 123 + \u0026#34;Name\u0026#34; = \u0026#34;AWS-UE1-VPC-MGMT-public\u0026#34; 124 + \u0026#34;Owner\u0026#34; = \u0026#34;Nicolas MICHEL\u0026#34; 125 } 126 + vpc_id = (known after apply) 127 } 128 129 # module.vpc.aws_route_table_association.private[0] will be created 130 + resource \u0026#34;aws_route_table_association\u0026#34; \u0026#34;private\u0026#34; { 131 + id = (known after apply) 132 + route_table_id = (known after apply) 133 + subnet_id = (known after apply) 134 } 135 136 # module.vpc.aws_route_table_association.private[1] will be created 137 + resource \u0026#34;aws_route_table_association\u0026#34; \u0026#34;private\u0026#34; { 138 + id = (known after apply) 139 + route_table_id = (known after apply) 140 + subnet_id = (known after apply) 141 } 142 143 # module.vpc.aws_route_table_association.public[0] will be created 144 + resource \u0026#34;aws_route_table_association\u0026#34; \u0026#34;public\u0026#34; { 145 + id = (known after apply) 146 + route_table_id = (known after apply) 147 + subnet_id = (known after apply) 148 } 149 150 # module.vpc.aws_route_table_association.public[1] will be created 151 + resource \u0026#34;aws_route_table_association\u0026#34; \u0026#34;public\u0026#34; { 152 + id = (known after apply) 153 + route_table_id = (known after apply) 154 + subnet_id = (known after apply) 155 } 156 157 # module.vpc.aws_subnet.private[0] will be created 158 + resource \u0026#34;aws_subnet\u0026#34; \u0026#34;private\u0026#34; { 159 + arn = (known after apply) 160 + assign_ipv6_address_on_creation = false 161 + availability_zone = \u0026#34;us-east-1a\u0026#34; 162 + availability_zone_id = (known after apply) 163 + cidr_block = \u0026#34;10.0.10.96/28\u0026#34; 164 + enable_dns64 = false 165 + enable_resource_name_dns_a_record_on_launch = false 166 + enable_resource_name_dns_aaaa_record_on_launch = false 167 + id = (known after apply) 168 + ipv6_cidr_block_association_id = (known after apply) 169 + ipv6_native = false 170 + map_public_ip_on_launch = false 171 + owner_id = (known after apply) 172 + private_dns_hostname_type_on_launch = (known after apply) 173 + tags = { 174 + \u0026#34;Environment\u0026#34; = \u0026#34;IT Services\u0026#34; 175 + \u0026#34;Name\u0026#34; = \u0026#34;AWS-UE1-VPC-MGMT-private-us-east-1a\u0026#34; 176 + \u0026#34;Owner\u0026#34; = \u0026#34;Nicolas MICHEL\u0026#34; 177 } 178 + tags_all = { 179 + \u0026#34;Environment\u0026#34; = \u0026#34;IT Services\u0026#34; 180 + \u0026#34;Name\u0026#34; = \u0026#34;AWS-UE1-VPC-MGMT-private-us-east-1a\u0026#34; 181 + \u0026#34;Owner\u0026#34; = \u0026#34;Nicolas MICHEL\u0026#34; 182 } 183 + vpc_id = (known after apply) 184 } 185 186 # module.vpc.aws_subnet.private[1] will be created 187 + resource \u0026#34;aws_subnet\u0026#34; \u0026#34;private\u0026#34; { 188 + arn = (known after apply) 189 + assign_ipv6_address_on_creation = false 190 + availability_zone = \u0026#34;us-east-1b\u0026#34; 191 + availability_zone_id = (known after apply) 192 + cidr_block = \u0026#34;10.0.10.112/28\u0026#34; 193 + enable_dns64 = false 194 + enable_resource_name_dns_a_record_on_launch = false 195 + enable_resource_name_dns_aaaa_record_on_launch = false 196 + id = (known after apply) 197 + ipv6_cidr_block_association_id = (known after apply) 198 + ipv6_native = false 199 + map_public_ip_on_launch = false 200 + owner_id = (known after apply) 201 + private_dns_hostname_type_on_launch = (known after apply) 202 + tags = { 203 + \u0026#34;Environment\u0026#34; = \u0026#34;IT Services\u0026#34; 204 + \u0026#34;Name\u0026#34; = \u0026#34;AWS-UE1-VPC-MGMT-private-us-east-1b\u0026#34; 205 + \u0026#34;Owner\u0026#34; = \u0026#34;Nicolas MICHEL\u0026#34; 206 } 207 + tags_all = { 208 + \u0026#34;Environment\u0026#34; = \u0026#34;IT Services\u0026#34; 209 + \u0026#34;Name\u0026#34; = \u0026#34;AWS-UE1-VPC-MGMT-private-us-east-1b\u0026#34; 210 + \u0026#34;Owner\u0026#34; = \u0026#34;Nicolas MICHEL\u0026#34; 211 } 212 + vpc_id = (known after apply) 213 } 214 215 # module.vpc.aws_subnet.public[0] will be created 216 + resource \u0026#34;aws_subnet\u0026#34; \u0026#34;public\u0026#34; { 217 + arn = (known after apply) 218 + assign_ipv6_address_on_creation = false 219 + availability_zone = \u0026#34;us-east-1a\u0026#34; 220 + availability_zone_id = (known after apply) 221 + cidr_block = \u0026#34;10.0.10.0/28\u0026#34; 222 + enable_dns64 = false 223 + enable_resource_name_dns_a_record_on_launch = false 224 + enable_resource_name_dns_aaaa_record_on_launch = false 225 + id = (known after apply) 226 + ipv6_cidr_block_association_id = (known after apply) 227 + ipv6_native = false 228 + map_public_ip_on_launch = true 229 + owner_id = (known after apply) 230 + private_dns_hostname_type_on_launch = (known after apply) 231 + tags = { 232 + \u0026#34;Environment\u0026#34; = \u0026#34;IT Services\u0026#34; 233 + \u0026#34;Name\u0026#34; = \u0026#34;AWS-UE1-VPC-MGMT-public-us-east-1a\u0026#34; 234 + \u0026#34;Owner\u0026#34; = \u0026#34;Nicolas MICHEL\u0026#34; 235 } 236 + tags_all = { 237 + \u0026#34;Environment\u0026#34; = \u0026#34;IT Services\u0026#34; 238 + \u0026#34;Name\u0026#34; = \u0026#34;AWS-UE1-VPC-MGMT-public-us-east-1a\u0026#34; 239 + \u0026#34;Owner\u0026#34; = \u0026#34;Nicolas MICHEL\u0026#34; 240 } 241 + vpc_id = (known after apply) 242 } 243 244 # module.vpc.aws_subnet.public[1] will be created 245 + resource \u0026#34;aws_subnet\u0026#34; \u0026#34;public\u0026#34; { 246 + arn = (known after apply) 247 + assign_ipv6_address_on_creation = false 248 + availability_zone = \u0026#34;us-east-1b\u0026#34; 249 + availability_zone_id = (known after apply) 250 + cidr_block = \u0026#34;10.0.10.16/28\u0026#34; 251 + enable_dns64 = false 252 + enable_resource_name_dns_a_record_on_launch = false 253 + enable_resource_name_dns_aaaa_record_on_launch = false 254 + id = (known after apply) 255 + ipv6_cidr_block_association_id = (known after apply) 256 + ipv6_native = false 257 + map_public_ip_on_launch = true 258 + owner_id = (known after apply) 259 + private_dns_hostname_type_on_launch = (known after apply) 260 + tags = { 261 + \u0026#34;Environment\u0026#34; = \u0026#34;IT Services\u0026#34; 262 + \u0026#34;Name\u0026#34; = \u0026#34;AWS-UE1-VPC-MGMT-public-us-east-1b\u0026#34; 263 + \u0026#34;Owner\u0026#34; = \u0026#34;Nicolas MICHEL\u0026#34; 264 } 265 + tags_all = { 266 + \u0026#34;Environment\u0026#34; = \u0026#34;IT Services\u0026#34; 267 + \u0026#34;Name\u0026#34; = \u0026#34;AWS-UE1-VPC-MGMT-public-us-east-1b\u0026#34; 268 + \u0026#34;Owner\u0026#34; = \u0026#34;Nicolas MICHEL\u0026#34; 269 } 270 + vpc_id = (known after apply) 271 } 272 273 # module.vpc.aws_vpc.this[0] will be created 274 + resource \u0026#34;aws_vpc\u0026#34; \u0026#34;this\u0026#34; { 275 + arn = (known after apply) 276 + assign_generated_ipv6_cidr_block = false 277 + cidr_block = \u0026#34;10.0.10.0/24\u0026#34; 278 + default_network_acl_id = (known after apply) 279 + default_route_table_id = (known after apply) 280 + default_security_group_id = (known after apply) 281 + dhcp_options_id = (known after apply) 282 + enable_classiclink = (known after apply) 283 + enable_classiclink_dns_support = (known after apply) 284 + enable_dns_hostnames = false 285 + enable_dns_support = true 286 + id = (known after apply) 287 + instance_tenancy = \u0026#34;default\u0026#34; 288 + ipv6_association_id = (known after apply) 289 + ipv6_cidr_block = (known after apply) 290 + ipv6_cidr_block_network_border_group = (known after apply) 291 + main_route_table_id = (known after apply) 292 + owner_id = (known after apply) 293 + tags = { 294 + \u0026#34;Environment\u0026#34; = \u0026#34;IT Services\u0026#34; 295 + \u0026#34;Name\u0026#34; = \u0026#34;AWS-UE1-VPC-MGMT\u0026#34; 296 + \u0026#34;Owner\u0026#34; = \u0026#34;Nicolas MICHEL\u0026#34; 297 } 298 + tags_all = { 299 + \u0026#34;Environment\u0026#34; = \u0026#34;IT Services\u0026#34; 300 + \u0026#34;Name\u0026#34; = \u0026#34;AWS-UE1-VPC-MGMT\u0026#34; 301 + \u0026#34;Owner\u0026#34; = \u0026#34;Nicolas MICHEL\u0026#34; 302 } 303 } 304 305Plan: 15 to add, 0 to change, 0 to destroy. 306module.vpc.aws_vpc.this[0]: Creating... 307module.vpc.aws_vpc.this[0]: Creation complete after 2s [id=vpc-0d69b9d9d035a3211] 308module.vpc.aws_internet_gateway.this[0]: Creating... 309module.vpc.aws_route_table.private[1]: Creating... 310module.vpc.aws_default_route_table.default[0]: Creating... 311module.vpc.aws_subnet.private[0]: Creating... 312module.vpc.aws_subnet.private[1]: Creating... 313module.vpc.aws_route_table.private[0]: Creating... 314module.vpc.aws_subnet.public[1]: Creating... 315module.vpc.aws_subnet.public[0]: Creating... 316module.vpc.aws_route_table.public[0]: Creating... 317module.vpc.aws_default_route_table.default[0]: Creation complete after 0s [id=rtb-013e6bb525838db79] 318module.vpc.aws_internet_gateway.this[0]: Creation complete after 1s [id=igw-0b0e542cb990236bb] 319module.vpc.aws_route_table.private[1]: Creation complete after 1s [id=rtb-04bbfcd5698ba09b1] 320module.vpc.aws_subnet.private[1]: Creation complete after 1s [id=subnet-045c21dd73cb6b884] 321module.vpc.aws_route_table.public[0]: Creation complete after 1s [id=rtb-0ea1ec6dfcda17cfb] 322module.vpc.aws_route.public_internet_gateway[0]: Creating... 323module.vpc.aws_route_table.private[0]: Creation complete after 1s [id=rtb-0621af979022ced9e] 324module.vpc.aws_subnet.private[0]: Creation complete after 1s [id=subnet-0ea8623065f7d1ad8] 325module.vpc.aws_route_table_association.private[1]: Creating... 326module.vpc.aws_route_table_association.private[0]: Creating... 327module.vpc.aws_route.public_internet_gateway[0]: Creation complete after 0s [id=r-rtb-0ea1ec6dfcda17cfb1080289494] 328module.vpc.aws_route_table_association.private[1]: Creation complete after 0s [id=rtbassoc-0004ba062692cf374] 329module.vpc.aws_route_table_association.private[0]: Creation complete after 0s [id=rtbassoc-000104d5c187f0447] 330module.vpc.aws_subnet.public[1]: Still creating... [10s elapsed] 331module.vpc.aws_subnet.public[0]: Still creating... [10s elapsed] 332module.vpc.aws_subnet.public[0]: Creation complete after 11s [id=subnet-091fc97a306565841] 333module.vpc.aws_subnet.public[1]: Creation complete after 11s [id=subnet-028328f18f4e7abca] 334module.vpc.aws_route_table_association.public[0]: Creating... 335module.vpc.aws_route_table_association.public[1]: Creating... 336module.vpc.aws_route_table_association.public[0]: Creation complete after 1s [id=rtbassoc-070ed95b691a0a6dc] 337module.vpc.aws_route_table_association.public[1]: Creation complete after 1s [id=rtbassoc-026c58be638f03aaa] 338 339Apply complete! Resources: 15 added, 0 changed, 0 destroyed. And voila ! The last lines in the outputs are the most important and will show you the networks constructs created !\n","link":"https://blog.vpackets.net/post/aws/networking/automation-vpc/","section":"post","tags":["AWS","VPC"],"title":"Create a VPC - Automation"},{"body":"This blogpost will link all the resources that I am using to pass this certification:\nBlueprint AWS SAA C03 Blueprint. Whitepapers and documentation AWS - Well Architected Framework. AWS - Service Overview. Training and Resources (order or priority) Adrian Cantrill - AWS SAA C03 Training. Andrew Brown - AWS Cloud Project Bootcamp. A Cloud Guru - AWS SAA C03 Training. Projects and Code AWS - BGP Infrastructure and 3 tier app - TBD. ","link":"https://blog.vpackets.net/post/aws/certifications/saa-c03-introduction/","section":"post","tags":["AWS"],"title":"AWS SAA-C03 Preparation"},{"body":"","link":"https://blog.vpackets.net/","section":"","tags":null,"title":""},{"body":"","link":"https://blog.vpackets.net/categories/","section":"categories","tags":null,"title":"Categories"},{"body":"","link":"https://blog.vpackets.net/tags/frr/","section":"tags","tags":null,"title":"FRR"},{"body":"","link":"https://blog.vpackets.net/tags/linux-networking/","section":"tags","tags":null,"title":"Linux Networking"},{"body":"","link":"https://blog.vpackets.net/categories/networking/","section":"categories","tags":null,"title":"Networking"},{"body":"","link":"https://blog.vpackets.net/post/","section":"post","tags":null,"title":"Posts"},{"body":"","link":"https://blog.vpackets.net/tags/","section":"tags","tags":null,"title":"Tags"},{"body":"","link":"https://blog.vpackets.net/tags/aws/","section":"tags","tags":null,"title":"AWS"},{"body":"","link":"https://blog.vpackets.net/categories/cloud-networking/","section":"categories","tags":null,"title":"Cloud Networking"},{"body":"","link":"https://blog.vpackets.net/tags/vpc/","section":"tags","tags":null,"title":"VPC"},{"body":"","link":"https://blog.vpackets.net/categories/certifications/","section":"categories","tags":null,"title":"Certifications"},{"body":"","link":"https://blog.vpackets.net/archives/","section":"","tags":null,"title":""},{"body":"Welcome to my blog Welcome to vPackets.net ! The purpose of this blog is to share my experience regarding the diversify subjects that I am passionate about. Networking has been very static at the begining of my career and I can't believe the number of current innovations in our industry right now.\nWho am I ? My name is Nicolas MICHEL. I am a french networking engineer and expatriate\nI have spent 15 years in the IT industry and I primarily focus on networking (Data Center – Enterprise Campus – WAN) and Unified Communications. After focusing on traditionnal networking I realized that our industry was completely shifting to new frameworks and ways to deliver technological outcomes that would answer some business challenges that companies are struggling with. I decided to stay a networking expert but with a focus on Automation and Devops.\nI have designed and implemented several networking solutions for my customers with either a local or international presence.\nI have 3 wonderful kids and we live with my wife in Austin, TX. I am an ex national swimmer with a desperate love for endurance sports. I am training for Ironman races. I also enjoy photography, movies and MMORPGs from time to time.\nWhat do I do and who do I work for? I had the privilege to experience multiple roles in my career. I have been delivering networking solutions, act as a solution architect. Recently I have been a Technical Product Manager (Technical marketing engineer) at VMware in charge of the layer 3 features of NSX and a Principal product manager at Aviatrix. I was working on the layer 3 features as well of Aviatrix.\nUnderstand new use cases to be addressed in the platform by developing deep technical relationships with the customers and field teams, and by maintaining a broad understanding of the cloud networking market. Design new, excitingnetworking features that address these use cases. Partner with the engineering team to validate the feasibility and the development effort. Identify tradeoffs when necessary. Follow the feature during the coding and testing phase to ensure that the implementation is aligned with the requirements. Work with key customers prior to the release with the Customer Preview Program. Launch the feature externally by collaborating with the product marketing and technical marketing groups. Monitor the customer feedback and continuously improve the feature after the launch. Provide technical and architectural expertise for the feature to customers and field teams. Deliver roadmap sessions to customers. Certification and Awards I currently hold the following certifications:\nCCIE #29410 Routing \u0026amp; Switching CCIE #29410 Data Center Aviatrix Certified Engineer - Associate Aviatrix Certified Engineer - Professional When I was part of the French Air Force, I have received the bronze national defence medal. It was created by Charles Hernu, Minister of Defence and established by decree on April 21, 1982. It rewards particularly honourable service rendered by military personnel for their participation in operational activities.\nGoals ? I am getting certified in cloud technologies:\nAWS SAA-CO3 in progress Resume You can find my resume here\nSports I have multiple races scheduled for 2023: Ironman Texas - 140.6. Ironman StGeorge - 70.3. Ironman Switzerland - 140.6. ","link":"https://blog.vpackets.net/about/","section":"","tags":null,"title":"About"},{"body":"","link":"https://blog.vpackets.net/series/","section":"series","tags":null,"title":"Series"}]